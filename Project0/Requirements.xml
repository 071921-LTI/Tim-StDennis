<!-- 
A Shop App:
	**Dungeons and Dragons/TTRPG Centered
	7/29: It's an auction house...!
	
	*Uses JDBC for data storage/access
	*Issue: "What does 'Remove an Item' Mean? Drop it from Table? (Most likely), Make it unavailable to be selected? (Desired, given that even a removed item 
		in a shop would still have some presense in the product backlogs...)
	*Answer: "Remove" means "Remove", so we'd have to drop it from the Items Table...
		-But we can't just outright drop it since we need the Item information if it's removed after it's bought..
		-Payment history should include the name of the item, not just the item ID.
		-View: Library. On Confirmation of Purchase, Library is updated with the following items THAT ARE NOT REFERENCES.
			Primary Key: Item_ID
			VarChar: Name of item
			OwnerID
	*Issue: How do we track money...
	
--->

<Database>
	<Table 1: "User">
		-ID(Primary Key, Varchar2/String, 10 Bytes)
			-Unique series of Numbers and Characters.
		-First Name(Varchar2/String, 10-20 Bytes)
		-Last Name(Varchar2/String, 10-20 Bytes)
		-Middle Initial(Char, 1 Bytes)
		-Role([Basics]Varchar2/String, 10 Bytes, Can only be "EMPLOYEE", or "CUSTOMER"[Master], or "MANAGER")
			-It is assumed that All of these roles are considered "Users"
		-UserName(Varchar2/String, 20 Bytes)
		-PassWord(Varchar2/String, 20 Bytes)
			-When working with this, must be case sensitive.
	</Table 1: "User">
	<Table 2: "Items">
		Item_ID(Primary Key, Varchar2/String, 20 Bytes)
			-Unique Series of Numbers and Characters.
		NameOfItem(Varchar2/String, 20 Bytes)
		OneTimeCost(Decimal/Price, ?? Bytes)
		WeeklyCost(Decimal/Price, ?? Bytes)
	</Table 2: "Items">
	<Table 3: "Payment Information">
		<!--This would be the Customer's Payment information. -->
		-ID(Primary Key, Varchar2/String, 10 Bytes)
			-Equal to User.ID
		CreditCardNumber(Varchar2/String, 20 bytes)
		ExpMonth(Varchar2/String, 2 Bytes)
		ExpYear(Varchar2/String, 2 Bytes)
	</Table 3: "Payment Information">
	<Table 4: "The Bank">
		<!--This should be pre-established information, rather than something the user enters
			in the process of using the app.
		--->
		ID(Primary Key, Numeric, 5 Bytes)
		CreditCardNumber(Varchar2/String, 20 Bytes)
		ExpMonth(Varchar2/String, 2 Bytes)
		ExpYear(Varchar2/String, 2 Bytes)
		SecurityCode(Numeric, 3 Bytes)
			-3 Digit Security Code.
		AccountFunds(Price)
	</Table 4: "The Bank">
	<Table 5: "Item Offers">
		OfferID(PrimaryKey, VarChar2/String, 20 Bytes)
			-Unique Series of Numbers and Characters.
		Item_ID(Varchar2/String, 20 Bytes)
			-The same as Item_ID in the Items Table
		OfferFrom(Varchar2/String, 10 Bytes)
			-The same as ID from the Users Table
		OfferingToPay(Decimal/Price, ?? Bytes)
		IsWeekly(Boolean, 1 Byte)
		Accepted(Boolean, 1 Byte)
	</Table 5: "Item Offers">
	<View 1: "Payment History">
		TransID(PrimaryKey, Varchar2/String, 20 Bytes)
			-Unique Series of Number and Characters.
		ForItem(Varchar2/String, 20 Bytes)
			-The same as Item_ID in the Item Offers Table
		DateOfPayment(DateTime, ?? Bytes)
			-The date when the Employee changes the Item Offers Table's Accepted Variable to Y.
		PaymentIsWeekly(Boolean, 1 Byte)
			-If Item Offers Table's "IsWeekly" variable set to Y, then this is as well.
		Payment(Decimal/Price, ?? Bytes)
		PayerID(Varchar2/String, 20 Bytes)
			-The Same as ID in the Users Table.
	</View 1: "Payment History">
	<View 2: "Inventory">
		Item_ID(PrimaryKey)
			Gotten from Item ID
		Name_Of_Item(VarChar)
			Gotten from Item.NameOfItem
		OwnerID
			Gotten from User.ID
	</View 2: "Inventory">
</Database>

<Available Actions>
	<Role Type: User>
		<Action 1: Log in>
			Takes the user to the log in screen
				Provide the Username, then Password.
					-If the Username AND Case-sensitive Password equals a row in the Database, then User is admitted.
						-The Role Type is updated to the proper role, based on the database entry.
					-If the UserName AND Case-sensitive Password does not equal a row in the database, an error message is displayed.
						-"Incorrect Username and/or Password, please try again.
						-The User then has another chance to enter their UserName/Password.
		</Action 1: Log In>
		<Action 2: Register for new Account>
			Enables the user to enter a Username and password first. 
				-Check if Username is taken or not. If it is not, then proceed, otherwise mention that the username has been taken, and loop back.
				-After the UserName and Password have been answered, the User is asked for their Payment information. 
					-After entering the credentials, check the Bank Table if everything is correct.
				-After everything is done, Add a new entry in the User and Payment Information Tables.
				-The User's role is then updated to the proper role of "Customer".
		</Action 2: Register for new Account>
		<Action 3: Quit>
			-Quits out of the app.
		</Action 3: Quit>
	</Role Type: User>
	<Role Type: Customer>
		<Action 1: Browse>
			-This displays all items available from the Items Table
			<Sub Action 1: Search>
			</Sub Action 1: Search>
		</Action 1: Browse>
		<Action 2: Check Owned Items>
			-This displays all items the Customer owns.
			<Sub Action 1: Return>
			</Sub Action 1: Return>
		</Action 2: Check Owned Items>
		<Action 3: Log off>
			-Demotes the current Customer to "User" and brings them back to the start screen.
		</Action 3: Log off>
	</Role Type: Customer>
	<Role Type: Employee>
		<Action 1: Check Pending Offers>
		</Action 1: Check Pending Offers>
		<Action 2: Item Management>
			<Sub Action 1: Add a New Item>
			</Sub Action 1: Add a New Item>
			<Sub Action 2: Remove an Item>
			</Sub Action 2: Remove an Item>
		</Action 2: Item Management>
		<Action 3: View Payment History>
		</Action 3: View Payment History>
		<Action 4: Log Off>
		</Action 4: Log Off>
	</Role Type: Employee>
	<Role Type: Manager>
		<Action 1: Create New Employee Account>
		</Action 1: Create New Employee Account>
		<Action 2: Fire an Employee>
		</Action 2: Fire an Employee>
		<Action 3: View Payment History>
		</Action 3: View Payment History>
		<Action 4: Log Off>
		</Action 4: Log Off>
	</Role Type: Manager>
</Available Actions>